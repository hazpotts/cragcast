name: Deploy Glide static site to Cloudflare Workers

on:
  push:
    branches:
      - "main"
    paths:
      - "assets/**"
      - "components/**"
      - "composables/**"
      - "pages/**"
      - "plugins/**"
      - "public/**"
      - "server/**"
      - "utils/**"
      - "types/**"
      - "app.vue"
      - "app.config.ts"
      - "nuxt.config.*"
      - "package.json"
      - "pnpm-lock.yaml"
      - "worker.js"
      - "wrangler.toml"
      - ".github/workflows/deploy-cloudflare.yml"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    permissions:
      contents: read
      deployments: write

    env:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      APP_DOMAIN: ${{ vars.APP_DOMAIN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: pnpm fetch
        run: pnpm fetch

      - name: Install dependencies (frozen, offline if possible)
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Nuxt generate
        env:
          APP_DOMAIN: ${{ vars.APP_DOMAIN }}
        run: pnpm exec nuxi generate

      - name: Generate wrangler.toml (from secrets)
        run: |
          cat > wrangler.toml <<EOF
          name = "cragcast"
          main = "worker.js"
          compatibility_date = "2025-10-06"

          routes = [
            { pattern = "${{ vars.APP_DOMAIN }}/*", zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID }}" }
          ]

          workers_dev = false

          [[kv_namespaces]]
          binding = "CLIMB_KV"
          id = "local-cragcast-kv"
          preview_id = "local-cragcast-kv"

          [assets]
          directory = ".output/public"
          binding = "ASSETS"
          EOF

      - name: Deploy via Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '4'
          command: deploy --minify
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}